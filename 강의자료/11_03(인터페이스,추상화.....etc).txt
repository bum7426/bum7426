1103 8장 인터페이스

- 인터페이스, 추상 클래스 두 문법의 특징 : 문법적으로 변수 생성할 수 없음.
						오로지 상속만을 위해 생성

- interface 인터페이스 이름
{
	반환형식 메소드이름1 (매개변수 목록);
	반환형식 메소드이름2 (매개변수 목록);
	반환형식 메소드이름3 (매개변수 목록);
}


- 인터페이스는 상속이 되지만 정의를 해주지 않았기에 맨 밑에 클래스가 있어야함.

- 여러개를 상속받을 수 있지만 중복의 위험성을 내포하고 있기 때문에 추천하지 않음

- 다형성이 나쁘다는 것은 아니지만 구조를 직접 설계할때는 지양하라......

- C#은 클래스 다중상속은 안되고 인터페이스 다중 상속은 가능.

- 추상클래스는 인터페이스와 달리 "구현"을 가질 수 있음.
  but, 클래스와 달리 인스턴스는 가질 수 없음.
- 인스턴스 : 변수, 객체, 클래스(C#) (같다보단 거의 유사하다)
- 물리공간에 메모리 할당 : 인스턴스화

- abstract class 클래스 이름
{
	//클래스와 동일하게 구현
}

- 추상클래스에서는 자식클래스에 override를 해주어야함. 
  왜냐면 클래스와 비슷하기 때문에!

- 두발자전거라는 클래스에 보조바퀴를 추가하고싶을 땐 "일반 상속"
- 사람이라는 "공통기능"을 상위에 구현하고 밑에서 받아쓸 때는 "추상클래스"
- 인터페이스 : 서로의 공통점은 없지만 하나로 묶어놓고 호출하고 싶을때
		호출의 공통점만을 유지할 때
		ex. 업데이트


///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////

9장 - 프로퍼티 
- 멤버에 대한 접근자(get, set)관련 문법
- 접근에 관련된 세밀한 조정
- 1. 접근제어에 대한 문법, 한정자와는 다른 개념
- 내부외부 관계없는 접근제어

public int PrivateNum : 이 자체가 변수이자 프로퍼티
{
	get
	{
		return m_PrivateNum;
	}
	set
	{
		m_PrivateNum = value;
	}
}
** 대입과 참조에 대해 변수처럼 설정할 수 있는 문법적 기능, 
   엄밀히 말하면 변수는 아님 **