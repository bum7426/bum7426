using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;

public class NPC_FSM : MonoBehaviour {
    public enum NpcState { Idle, Move, Talk}
    public NpcState NS = NpcState.Idle;


    [SerializeField]//  행동 변경 시간
    float m_ChangeTime;

    ////////////////////////////////////////////////
    [SerializeField]//  중심점
    Vector3 m_BasePoint;
    [SerializeField]//  이동 한계 영역
    float m_AreaLength;
    [SerializeField]//  이동 좌표
    Vector3 m_MovePoint;
    [SerializeField]//  이동 속도
    float m_MoveSpeed;

    ////////////////////////////////////////////////
    [SerializeField]
    GameObject m_Area = null;
    [SerializeField]
    GameObject m_UIPanel = null;

    private bool IsPlaying;

    // Use this for initialization
    void Start()
    {
        //일정한 간격으로 몬스터의 행동상태를 체크
        StartCoroutine(this.CheckMonsterState());
        //몬스터의 상태에 따른 동작
        StartCoroutine(this.MonsterAction());
    }

    // Update is called once per frame
    void Update()
    {
        //  영역 표시
    }

    IEnumerator CheckMonsterState()
    {
        while (IsPlaying)
        {
            yield return new WaitForSeconds(m_ChangeTime);
            if (Vector3.Distance(m_MovePoint, transform.position) < 0.1)
            {
                NS = NpcState.Idle;
            }
            else
            {
                NS = NpcState.Move;
            }
        }
    }

    IEnumerator MonsterAction()
    {
        while (IsPlaying)
        {
            switch (NS)
            {
                case NpcState.Idle:
                    break;

                case NpcState.Move:
                    //  위치 생성
                    m_MovePoint = m_BasePoint + UnityEngine.Random.insideUnitSphere * m_AreaLength;
                    //  높이 맞춰주기
                    m_MovePoint.y = transform.position.y;
                    //  바라보기
                    transform.LookAt(m_MovePoint);
                    break;

                case NpcState.Talk:
                    transform.LookAt(Camera.main.transform);
                    if (Input.GetKeyDown(KeyCode.Escape))
                    {
                        NS = NpcState.Idle;
                    }
                    break;

            }
            yield return null;
        }
    }

    private void OnMouseDown()
    {
        if (EventSystem.current.IsPointerOverGameObject() == false)
        {
            NS = NpcState.Talk;
            m_UIPanel.SetActive(true);
        }
    }
}
